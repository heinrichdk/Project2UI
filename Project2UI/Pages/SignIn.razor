@inject NavigationManager _navigationManager
@inject UserService _userService
@inject BrowserStorageService _browserStorageService
@page "/signin"
@using Project2UI.Models
@using Project2UI.Services

<title>Sign In</title>


@if (HasError)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@ErrorMessage</MudAlert>
}


<div>

    <div style ="display: flex;justify-content: center;align-items: center; margin-top: 10mm" >
        <h1 >
            Sign In
        </h1>
    </div>
    <div style ="display: flex;justify-content: center;align-items: center; margin-top: 5mm ">
        <input  type="text" placeholder="Enter Username" @bind="Username">
    </div >
    <div style ="display: flex;justify-content: center;align-items: center; margin-top: 5mm ">
        <input  type="password" placeholder="Enter Password" @onkeydown="@Enter" @bind="Password">
    </div>
    <div style ="display: flex;justify-content: center;align-items: center; margin-top:5mm ">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SignInAsync">Sign in</MudButton>
    </div>
    <div style ="display: flex;justify-content: center;align-items: center; margin-top: 5mm ">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SignUpAsync">Sign Up</MudButton>
    </div>


</div>


@code {
    string Username { get; set; }
    string Password { get; set; }
    bool HasError { get; set; }
    string ErrorMessage { get; set; }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SignInAsync();
        }
    }


    public async Task SignUpAsync()
    {
        _navigationManager.NavigateTo("/signup");
    }

    public async Task SignInAsync()
    {
        var result = await _userService.SignIn(new SignInRequest
        {
            Username = Username,
            Password = Password
        });
        if (result.Success)
        {
            _navigationManager.NavigateTo("/");
        }
        else
        {
            HasError = true;
            ErrorMessage = result.Message;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _browserStorageService.RemoveItem("Project2");
    }

}